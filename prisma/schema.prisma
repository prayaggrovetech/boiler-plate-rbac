generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

// Core User model with RBAC integration
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // For credential auth
  image         String?   // For OAuth providers
  emailVerified DateTime?
  phone         String?   // User phone number
  location      String?   // User location (city, country)
  bio           String?   @db.Text // User biography
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // RBAC relationships
  userRoles     UserRole[]
  
  // NextAuth relationships
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// RBAC System Models
model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // RBAC relationships
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique  // e.g., "view:users", "manage:roles"
  resource    String          // e.g., "users", "roles", "analytics"
  action      String          // e.g., "view", "create", "update", "delete"
  description String?
  createdAt   DateTime @default(now())
  
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// Email Template Model
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "password_reset", "welcome", "profile_update"
  subject     String
  htmlContent String   @db.Text
  textContent String   @db.Text
  variables   String[] // Available variables like {{userName}}, {{resetUrl}}
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}